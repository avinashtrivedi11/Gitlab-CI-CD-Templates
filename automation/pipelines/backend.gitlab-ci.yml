# Import templates for code quality and security scans
include:
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

# Define pipeline stages
stages:
  - generate
  - test

# Generate the backend pipeline configuration
backend_pipeline_generator:
  stage: generate
  image: registry.gitlab.com/detecttechnologies/software/webapps/t-pulse/web/tpulse-msa/tpulse-msa-cicd/tpulse-python:1.0
  variables:
    # Docker authentication for GitLab registry
    DOCKER_AUTH_CONFIG: '{"auths":{"registry.gitlab.com":{"username":"${CONTAINER_REGISTRY_USER}","password":"${CONTAINER_REGISTRY_TOKEN}"}}}'
  script:
    - cp -R /app/scripts/* ./
    - python3 backend_pipeline_generator.py
  artifacts:
    # Save the generated configuration for later stages
    paths:
      - backend_pipeline.yml
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"

# Trigger the generated backend pipeline
backend_pipeline_trigger:
  stage: generate
  needs: ["backend_pipeline_generator"]
  trigger:
    include:
      - artifact: backend_pipeline.yml
        job: backend_pipeline_generator
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
  
# Enforce code quality checks, mainly for merge requests
code_quality:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "pipeline"  
      when: never 
    - when: never

# Check for exposed secrets, mainly for merge requests
secret_detection:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "pipeline"  
    - when: never

# Use Semgrep for static security analysis, mainly for merge requests
semgrep-sast:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "pipeline"  
    - when: never
