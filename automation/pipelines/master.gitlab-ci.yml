# Workflow Configuration
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never  # Prevent automatic pipeline run for push events
    - when: always # Run pipeline for all other cases

# Global Variables Configuration
variables:
  CLIENTS: 
    value: "dev"
    description: "Enter client's name separated by comma. Default is 'dev' for develop branch."
  VERSION:
    value: "dev"
    description: "Docker image tag. Default is 'dev'."
  RUN_INFRASTRUCTURE_PIPELINE:
    value: "false"
    options:
      - "true"
      - "false"
    description: "Set to 'true' to run infrastructure pipeline using terraform, or 'false' to not run in case of minor code changes."
  RUN_DEPLOYMENT_PIPELINE:
    value: "true"
    options:
      - "true"
      - "false"
    description: "Set to 'true' to run infrastructure pipeline using terraform, or 'false' to not run in case of minor code changes."
  RUN_CODE_QUALITY_TEST:
    value: "true"
    options:
      - "true"
      - "false"
    description: "Set to 'true' to run the QA tests, or 'false' to not run them."
  RUN_AUTOMATION_TEST:
    value: "false"
    options:
      - "true"
      - "false"
    description: "Set to 'true' to run the QA tests, or 'false' to not run them."

# Pipeline Stages Configuration
stages:
  - generate

# Default Configuration
default:
  image: registry.gitlab.com/detecttechnologies/software/webapps/t-pulse/web/tpulse-msa/tpulse-msa-cicd/tpulse-python:1.0
  tags:
    - saas-linux-medium-amd64

# Jobs Configuration
infrastructure_pipeline_generator:
  stage: generate
  script:
    - cp -R /app/scripts/* ./
    - python3 terraform_pipeline_generator.py
  artifacts:
    paths:
      - terraform_pipeline.yml
  rules:
    - if: $RUN_INFRASTRUCTURE_PIPELINE == "true"
infrastructure_pipeline_trigger:
  stage: generate
  needs: ["infrastructure_pipeline_generator"]
  trigger:
    include:
      - artifact: terraform_pipeline.yml
        job: infrastructure_pipeline_generator
    strategy: depend
  rules:
    - if: $RUN_INFRASTRUCTURE_PIPELINE == "true"
      when: manual

repos_pipeline_generator:
  stage: generate
  # needs: ["infrastructure_pipeline_generator"]
  script:
    - cp -R /app/scripts/* ./
    - python3 deployment_pipeline_generator.py
  artifacts:
    paths:
      - deployment_pipeline.yml
  rules:
    - if: $RUN_DEPLOYMENT_PIPELINE == "true"
      when: manual

repos_pipeline_trigger:
  stage: generate
  needs: ["repos_pipeline_generator"]
  trigger:
    include:
      - artifact: deployment_pipeline.yml
        job: repos_pipeline_generator
    strategy: depend
  rules:
    - if: $RUN_DEPLOYMENT_PIPELINE == "true"

tests_pipeline_generator:
  stage: generate
  # needs: ["infrastructure_pipeline_generator", "repos_pipeline_generator"]
  script:
    - cp -R /app/scripts/* ./
    - python3 test_pipeline_generator.py
  artifacts:
    paths:
      - test_pipeline.yml
  rules:
    - if: $RUN_AUTOMATION_TEST == "true"
      when: manual
   

tests_pipeline_trigger:
  stage: generate
  needs: ["tests_pipeline_generator"]
  trigger:
    include: 
      - artifact: test_pipeline.yml
        job: tests_pipeline_generator
    strategy: depend
  rules:
    - if: $RUN_AUTOMATION_TEST == "true"
